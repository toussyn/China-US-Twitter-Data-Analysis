{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <span style='color:green'> Task 3 : Data Exploration & Preprocessing, Topic Modeling & Sentiment Analysis</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import SGDClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the csv file generated from clean_tweets_dataframe.py\n",
    "tweets_df = pd.read_csv(\"data/clean_processed_tweet_data.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.1 Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>created_at</th>\n",
       "      <th>source</th>\n",
       "      <th>original_text</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>polarity</th>\n",
       "      <th>lang</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>original_author</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>friends_count</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>user_mentions</th>\n",
       "      <th>place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2022-08-07 22:31:20+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>0.190625</td>\n",
       "      <td>-1.250000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>20497</td>\n",
       "      <td>2621</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2022-08-07 22:31:16+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>-1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>691</td>\n",
       "      <td>201</td>\n",
       "      <td>ZIisq</td>\n",
       "      <td>65</td>\n",
       "      <td>272</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China, Taiwan</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2022-08-07 22:31:07+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>ZelenskyyUa</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2022-08-07 22:31:06+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2022-08-07 22:31:04+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>0.556250</td>\n",
       "      <td>-6.938894e-18</td>\n",
       "      <td>en</td>\n",
       "      <td>1521</td>\n",
       "      <td>381</td>\n",
       "      <td>VizziniDolores</td>\n",
       "      <td>910</td>\n",
       "      <td>2608</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ChinaUncensored</td>\n",
       "      <td>Ayent, Schweiz</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                 created_at  \\\n",
       "0           0  2022-08-07 22:31:20+00:00   \n",
       "1           1  2022-08-07 22:31:16+00:00   \n",
       "2           2  2022-08-07 22:31:07+00:00   \n",
       "3           3  2022-08-07 22:31:06+00:00   \n",
       "4           4  2022-08-07 22:31:04+00:00   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/android\" ...   \n",
       "1  <a href=\"http://twitter.com/download/android\" ...   \n",
       "2  <a href=\"http://twitter.com/download/android\" ...   \n",
       "3  <a href=\"http://twitter.com/download/android\" ...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                       original_text  subjectivity  \\\n",
       "0  RT @i_ameztoy: Extra random image (I):\\n\\nLets...      0.190625   \n",
       "1  RT @IndoPac_Info: #China's media explains the ...      0.100000   \n",
       "2  China even cut off communication, they don't a...      0.000000   \n",
       "3  Putin to #XiJinping : I told you my friend, Ta...      0.350000   \n",
       "4  RT @ChinaUncensored: I’m sorry, I thought Taiw...      0.556250   \n",
       "\n",
       "       polarity lang  favorite_count  retweet_count original_author  \\\n",
       "0 -1.250000e-01   en               4              2       i_ameztoy   \n",
       "1 -1.000000e-01   en             691            201           ZIisq   \n",
       "2  0.000000e+00   en               0              0       Fin21Free   \n",
       "3  1.000000e-01   en               0              0       Fin21Free   \n",
       "4 -6.938894e-18   en            1521            381  VizziniDolores   \n",
       "\n",
       "   followers_count  friends_count possibly_sensitive       hashtags  \\\n",
       "0            20497           2621                NaN           City   \n",
       "1               65            272                NaN  China, Taiwan   \n",
       "2               85            392                NaN      XiJinping   \n",
       "3               85            392                NaN      XiJinping   \n",
       "4              910           2608                NaN            NaN   \n",
       "\n",
       "     user_mentions           place  \n",
       "0        i_ameztoy             NaN  \n",
       "1     IndoPac_Info             NaN  \n",
       "2      ZelenskyyUa     Netherlands  \n",
       "3              NaN     Netherlands  \n",
       "4  ChinaUncensored  Ayent, Schweiz  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# display the first 5 rows from our dataset\n",
    "tweets_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 22000 entries, 0 to 21999\n",
      "Data columns (total 16 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Unnamed: 0          22000 non-null  int64  \n",
      " 1   created_at          22000 non-null  object \n",
      " 2   source              22000 non-null  object \n",
      " 3   original_text       22000 non-null  object \n",
      " 4   subjectivity        22000 non-null  float64\n",
      " 5   polarity            22000 non-null  float64\n",
      " 6   lang                22000 non-null  object \n",
      " 7   favorite_count      22000 non-null  int64  \n",
      " 8   retweet_count       22000 non-null  int64  \n",
      " 9   original_author     22000 non-null  object \n",
      " 10  followers_count     22000 non-null  int64  \n",
      " 11  friends_count       22000 non-null  int64  \n",
      " 12  possibly_sensitive  6191 non-null   object \n",
      " 13  hashtags            19141 non-null  object \n",
      " 14  user_mentions       18698 non-null  object \n",
      " 15  place               12107 non-null  object \n",
      "dtypes: float64(2), int64(5), object(9)\n",
      "memory usage: 2.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# display dataframe information\n",
    "tweets_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>created_at</th>\n",
       "      <th>source</th>\n",
       "      <th>original_text</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>polarity</th>\n",
       "      <th>lang</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>original_author</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>friends_count</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>user_mentions</th>\n",
       "      <th>place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21995</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21996</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21997</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21998</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21999</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22000 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0  created_at  source  original_text  subjectivity  polarity  \\\n",
       "0           False       False   False          False         False     False   \n",
       "1           False       False   False          False         False     False   \n",
       "2           False       False   False          False         False     False   \n",
       "3           False       False   False          False         False     False   \n",
       "4           False       False   False          False         False     False   \n",
       "...           ...         ...     ...            ...           ...       ...   \n",
       "21995       False       False   False          False         False     False   \n",
       "21996       False       False   False          False         False     False   \n",
       "21997       False       False   False          False         False     False   \n",
       "21998       False       False   False          False         False     False   \n",
       "21999       False       False   False          False         False     False   \n",
       "\n",
       "        lang  favorite_count  retweet_count  original_author  followers_count  \\\n",
       "0      False           False          False            False            False   \n",
       "1      False           False          False            False            False   \n",
       "2      False           False          False            False            False   \n",
       "3      False           False          False            False            False   \n",
       "4      False           False          False            False            False   \n",
       "...      ...             ...            ...              ...              ...   \n",
       "21995  False           False          False            False            False   \n",
       "21996  False           False          False            False            False   \n",
       "21997  False           False          False            False            False   \n",
       "21998  False           False          False            False            False   \n",
       "21999  False           False          False            False            False   \n",
       "\n",
       "       friends_count  possibly_sensitive  hashtags  user_mentions  place  \n",
       "0              False                True     False          False   True  \n",
       "1              False                True     False          False   True  \n",
       "2              False                True     False          False  False  \n",
       "3              False                True     False           True  False  \n",
       "4              False                True      True          False  False  \n",
       "...              ...                 ...       ...            ...    ...  \n",
       "21995          False               False     False          False   True  \n",
       "21996          False               False     False          False  False  \n",
       "21997          False                True     False          False  False  \n",
       "21998          False                True     False          False  False  \n",
       "21999          False                True     False          False   True  \n",
       "\n",
       "[22000 rows x 16 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null values\n",
    "tweets_df.isna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(22000, 16)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# shape of the dataframe\n",
    "tweets_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'created_at', 'source', 'original_text', 'subjectivity',\n",
       "       'polarity', 'lang', 'favorite_count', 'retweet_count',\n",
       "       'original_author', 'followers_count', 'friends_count',\n",
       "       'possibly_sensitive', 'hashtags', 'user_mentions', 'place'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show columns of the dataframe\n",
    "tweets_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>created_at</th>\n",
       "      <th>source</th>\n",
       "      <th>original_text</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>polarity</th>\n",
       "      <th>lang</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>original_author</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>friends_count</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>user_mentions</th>\n",
       "      <th>place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>2022-08-07 22:31:02+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>RT @benedictrogers: We must not let this happe...</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>en</td>\n",
       "      <td>116</td>\n",
       "      <td>36</td>\n",
       "      <td>GraceCh15554845</td>\n",
       "      <td>207</td>\n",
       "      <td>54</td>\n",
       "      <td>False</td>\n",
       "      <td>Taiwan</td>\n",
       "      <td>benedictrogers</td>\n",
       "      <td>Melbourne, Victoria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>2022-08-07 22:26:25+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>RT @ChinaInfo777: #PinkFloyd Roger Waters tell...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>en</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "      <td>nhohn2011</td>\n",
       "      <td>870</td>\n",
       "      <td>508</td>\n",
       "      <td>False</td>\n",
       "      <td>PinkFloyd, Taiwan, China</td>\n",
       "      <td>ChinaInfo777</td>\n",
       "      <td>Florida, USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>2022-08-07 22:25:37+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>RT @WilliamYang120: \"For too long, #Taiwan has...</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.025000</td>\n",
       "      <td>en</td>\n",
       "      <td>311</td>\n",
       "      <td>84</td>\n",
       "      <td>hoggothoaryhost</td>\n",
       "      <td>44</td>\n",
       "      <td>60</td>\n",
       "      <td>False</td>\n",
       "      <td>Taiwan</td>\n",
       "      <td>WilliamYang120</td>\n",
       "      <td>Hong Kong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>2022-08-07 22:25:05+00:00</td>\n",
       "      <td>&lt;a href=\"https://help.twitter.com/en/using-twi...</td>\n",
       "      <td>RT @odisseoisback: #Corfu #Greece🇬🇷\\n#Summer #...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>hephaistos_ai</td>\n",
       "      <td>4161</td>\n",
       "      <td>208</td>\n",
       "      <td>False</td>\n",
       "      <td>Corfu, Greece, Summer, Beaches, Travel, Excurs...</td>\n",
       "      <td>odisseoisback</td>\n",
       "      <td>Paris</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>48</td>\n",
       "      <td>2022-08-07 22:24:44+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>RT @benedictrogers: We must not let this happe...</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>en</td>\n",
       "      <td>116</td>\n",
       "      <td>36</td>\n",
       "      <td>hoggothoaryhost</td>\n",
       "      <td>44</td>\n",
       "      <td>60</td>\n",
       "      <td>False</td>\n",
       "      <td>Taiwan</td>\n",
       "      <td>benedictrogers</td>\n",
       "      <td>Hong Kong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21981</th>\n",
       "      <td>21981</td>\n",
       "      <td>2022-08-06 18:04:09+00:00</td>\n",
       "      <td>&lt;a href=\"https://mobile.twitter.com\" rel=\"nofo...</td>\n",
       "      <td>RT @jenniferatntd: Head of #Taiwan's #missile ...</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>-0.200000</td>\n",
       "      <td>en</td>\n",
       "      <td>194</td>\n",
       "      <td>99</td>\n",
       "      <td>threadmaxwhispe</td>\n",
       "      <td>657</td>\n",
       "      <td>864</td>\n",
       "      <td>False</td>\n",
       "      <td>Taiwan, missile</td>\n",
       "      <td>jenniferatntd</td>\n",
       "      <td>Land of Ethan South Dakota</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21989</th>\n",
       "      <td>21989</td>\n",
       "      <td>2022-08-06 18:03:48+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Minister Wu is crystal clear in his @BBCNews i...</td>\n",
       "      <td>0.419444</td>\n",
       "      <td>0.158333</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>TECO_Toronto</td>\n",
       "      <td>955</td>\n",
       "      <td>202</td>\n",
       "      <td>False</td>\n",
       "      <td>Taiwan, StandWithTaiwan, DefendDemocracy</td>\n",
       "      <td>BBCNews, SpeakerPelosi</td>\n",
       "      <td>Toronto, Canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21990</th>\n",
       "      <td>21990</td>\n",
       "      <td>2022-08-06 18:03:47+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>RT @SpokespersonCHN: #PLA Live-fire military d...</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>-0.100000</td>\n",
       "      <td>en</td>\n",
       "      <td>2611</td>\n",
       "      <td>405</td>\n",
       "      <td>mumaralid</td>\n",
       "      <td>1164</td>\n",
       "      <td>605</td>\n",
       "      <td>True</td>\n",
       "      <td>PLA, Taiwan</td>\n",
       "      <td>SpokespersonCHN</td>\n",
       "      <td>Driver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21992</th>\n",
       "      <td>21992</td>\n",
       "      <td>2022-08-06 18:03:33+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>RT @jenniferatntd: Head of #Taiwan's #missile ...</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>-0.200000</td>\n",
       "      <td>en</td>\n",
       "      <td>194</td>\n",
       "      <td>99</td>\n",
       "      <td>9thousandbytes</td>\n",
       "      <td>401</td>\n",
       "      <td>858</td>\n",
       "      <td>False</td>\n",
       "      <td>Taiwan, missile</td>\n",
       "      <td>jenniferatntd</td>\n",
       "      <td>Northern Virginia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21996</th>\n",
       "      <td>21996</td>\n",
       "      <td>2022-08-06 18:03:27+00:00</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>en</td>\n",
       "      <td>507</td>\n",
       "      <td>183</td>\n",
       "      <td>sashalenik</td>\n",
       "      <td>94</td>\n",
       "      <td>1751</td>\n",
       "      <td>False</td>\n",
       "      <td>China, Taiwan, ChinaTaiwanCrisis</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>Gelendzhik</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1976 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                 created_at  \\\n",
       "5               5  2022-08-07 22:31:02+00:00   \n",
       "36             36  2022-08-07 22:26:25+00:00   \n",
       "39             39  2022-08-07 22:25:37+00:00   \n",
       "43             43  2022-08-07 22:25:05+00:00   \n",
       "48             48  2022-08-07 22:24:44+00:00   \n",
       "...           ...                        ...   \n",
       "21981       21981  2022-08-06 18:04:09+00:00   \n",
       "21989       21989  2022-08-06 18:03:48+00:00   \n",
       "21990       21990  2022-08-06 18:03:47+00:00   \n",
       "21992       21992  2022-08-06 18:03:33+00:00   \n",
       "21996       21996  2022-08-06 18:03:27+00:00   \n",
       "\n",
       "                                                  source  \\\n",
       "5      <a href=\"http://twitter.com/download/android\" ...   \n",
       "36     <a href=\"http://twitter.com/download/android\" ...   \n",
       "39     <a href=\"http://twitter.com/download/android\" ...   \n",
       "43     <a href=\"https://help.twitter.com/en/using-twi...   \n",
       "48     <a href=\"http://twitter.com/download/android\" ...   \n",
       "...                                                  ...   \n",
       "21981  <a href=\"https://mobile.twitter.com\" rel=\"nofo...   \n",
       "21989  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "21990  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "21992  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "21996  <a href=\"http://twitter.com/download/android\" ...   \n",
       "\n",
       "                                           original_text  subjectivity  \\\n",
       "5      RT @benedictrogers: We must not let this happe...      0.500000   \n",
       "36     RT @ChinaInfo777: #PinkFloyd Roger Waters tell...      0.000000   \n",
       "39     RT @WilliamYang120: \"For too long, #Taiwan has...      0.200000   \n",
       "43     RT @odisseoisback: #Corfu #Greece🇬🇷\\n#Summer #...      0.000000   \n",
       "48     RT @benedictrogers: We must not let this happe...      0.500000   \n",
       "...                                                  ...           ...   \n",
       "21981  RT @jenniferatntd: Head of #Taiwan's #missile ...      0.400000   \n",
       "21989  Minister Wu is crystal clear in his @BBCNews i...      0.419444   \n",
       "21990  RT @SpokespersonCHN: #PLA Live-fire military d...      0.250000   \n",
       "21992  RT @jenniferatntd: Head of #Taiwan's #missile ...      0.400000   \n",
       "21996  RT @IndoPac_Info: A good infographic of #China...      0.600000   \n",
       "\n",
       "       polarity lang  favorite_count  retweet_count  original_author  \\\n",
       "5      0.200000   en             116             36  GraceCh15554845   \n",
       "36     0.000000   en              23              5        nhohn2011   \n",
       "39    -0.025000   en             311             84  hoggothoaryhost   \n",
       "43     0.000000   en               0              2    hephaistos_ai   \n",
       "48     0.200000   en             116             36  hoggothoaryhost   \n",
       "...         ...  ...             ...            ...              ...   \n",
       "21981 -0.200000   en             194             99  threadmaxwhispe   \n",
       "21989  0.158333   en               0              0     TECO_Toronto   \n",
       "21990 -0.100000   en            2611            405        mumaralid   \n",
       "21992 -0.200000   en             194             99   9thousandbytes   \n",
       "21996  0.700000   en             507            183       sashalenik   \n",
       "\n",
       "       followers_count  friends_count possibly_sensitive  \\\n",
       "5                  207             54              False   \n",
       "36                 870            508              False   \n",
       "39                  44             60              False   \n",
       "43                4161            208              False   \n",
       "48                  44             60              False   \n",
       "...                ...            ...                ...   \n",
       "21981              657            864              False   \n",
       "21989              955            202              False   \n",
       "21990             1164            605               True   \n",
       "21992              401            858              False   \n",
       "21996               94           1751              False   \n",
       "\n",
       "                                                hashtags  \\\n",
       "5                                                 Taiwan   \n",
       "36                              PinkFloyd, Taiwan, China   \n",
       "39                                                Taiwan   \n",
       "43     Corfu, Greece, Summer, Beaches, Travel, Excurs...   \n",
       "48                                                Taiwan   \n",
       "...                                                  ...   \n",
       "21981                                    Taiwan, missile   \n",
       "21989           Taiwan, StandWithTaiwan, DefendDemocracy   \n",
       "21990                                        PLA, Taiwan   \n",
       "21992                                    Taiwan, missile   \n",
       "21996                   China, Taiwan, ChinaTaiwanCrisis   \n",
       "\n",
       "                user_mentions                         place  \n",
       "5              benedictrogers           Melbourne, Victoria  \n",
       "36               ChinaInfo777                  Florida, USA  \n",
       "39             WilliamYang120                     Hong Kong  \n",
       "43              odisseoisback                         Paris  \n",
       "48             benedictrogers                     Hong Kong  \n",
       "...                       ...                           ...  \n",
       "21981           jenniferatntd   Land of Ethan South Dakota   \n",
       "21989  BBCNews, SpeakerPelosi               Toronto, Canada  \n",
       "21990         SpokespersonCHN                        Driver  \n",
       "21992           jenniferatntd             Northern Virginia  \n",
       "21996            IndoPac_Info                    Gelendzhik  \n",
       "\n",
       "[1976 rows x 16 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop empty values\n",
    "tweets_df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets_df[\"source\"] = tweets_df[\"source\"].str.replace(r\"(\\s*\\<.*?\\>\\s*)\", \" \", regex=True).str.strip()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>created_at</th>\n",
       "      <th>source</th>\n",
       "      <th>original_text</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>polarity</th>\n",
       "      <th>lang</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>original_author</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>friends_count</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>user_mentions</th>\n",
       "      <th>place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2022-08-07 22:31:20+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>0.190625</td>\n",
       "      <td>-1.250000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>20497</td>\n",
       "      <td>2621</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2022-08-07 22:31:16+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>-1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>691</td>\n",
       "      <td>201</td>\n",
       "      <td>ZIisq</td>\n",
       "      <td>65</td>\n",
       "      <td>272</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China, Taiwan</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2022-08-07 22:31:07+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>ZelenskyyUa</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2022-08-07 22:31:06+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2022-08-07 22:31:04+00:00</td>\n",
       "      <td>Twitter for iPhone</td>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>0.556250</td>\n",
       "      <td>-6.938894e-18</td>\n",
       "      <td>en</td>\n",
       "      <td>1521</td>\n",
       "      <td>381</td>\n",
       "      <td>VizziniDolores</td>\n",
       "      <td>910</td>\n",
       "      <td>2608</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ChinaUncensored</td>\n",
       "      <td>Ayent, Schweiz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21995</th>\n",
       "      <td>21995</td>\n",
       "      <td>2022-08-06 18:03:29+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>7.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>507</td>\n",
       "      <td>183</td>\n",
       "      <td>VandelayT</td>\n",
       "      <td>62</td>\n",
       "      <td>471</td>\n",
       "      <td>False</td>\n",
       "      <td>China, Taiwan, ChinaTaiwanCrisis</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21996</th>\n",
       "      <td>21996</td>\n",
       "      <td>2022-08-06 18:03:27+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>7.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>507</td>\n",
       "      <td>183</td>\n",
       "      <td>sashalenik</td>\n",
       "      <td>94</td>\n",
       "      <td>1751</td>\n",
       "      <td>False</td>\n",
       "      <td>China, Taiwan, ChinaTaiwanCrisis</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>Gelendzhik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21997</th>\n",
       "      <td>21997</td>\n",
       "      <td>2022-08-06 18:03:27+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>@Reuters Thanks #Pelosi smart move.</td>\n",
       "      <td>0.421429</td>\n",
       "      <td>2.071429e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>ZeitounRimal</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pelosi</td>\n",
       "      <td>Reuters</td>\n",
       "      <td>🇺🇲🇷🇺🇺🇦🇫🇷🇦🇪🇮🇱🏳️‍🌈</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21998</th>\n",
       "      <td>21998</td>\n",
       "      <td>2022-08-06 18:03:26+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>5.000000e-02</td>\n",
       "      <td>en</td>\n",
       "      <td>199</td>\n",
       "      <td>67</td>\n",
       "      <td>SazzyCowgirl1</td>\n",
       "      <td>537</td>\n",
       "      <td>317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Taiwan, China</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>Oregon, USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21999</th>\n",
       "      <td>21999</td>\n",
       "      <td>2022-08-06 18:03:25+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>5.000000e-02</td>\n",
       "      <td>en</td>\n",
       "      <td>199</td>\n",
       "      <td>67</td>\n",
       "      <td>VandelayT</td>\n",
       "      <td>62</td>\n",
       "      <td>471</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Taiwan, China</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22000 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                 created_at               source  \\\n",
       "0               0  2022-08-07 22:31:20+00:00  Twitter for Android   \n",
       "1               1  2022-08-07 22:31:16+00:00  Twitter for Android   \n",
       "2               2  2022-08-07 22:31:07+00:00  Twitter for Android   \n",
       "3               3  2022-08-07 22:31:06+00:00  Twitter for Android   \n",
       "4               4  2022-08-07 22:31:04+00:00   Twitter for iPhone   \n",
       "...           ...                        ...                  ...   \n",
       "21995       21995  2022-08-06 18:03:29+00:00  Twitter for Android   \n",
       "21996       21996  2022-08-06 18:03:27+00:00  Twitter for Android   \n",
       "21997       21997  2022-08-06 18:03:27+00:00  Twitter for Android   \n",
       "21998       21998  2022-08-06 18:03:26+00:00  Twitter for Android   \n",
       "21999       21999  2022-08-06 18:03:25+00:00  Twitter for Android   \n",
       "\n",
       "                                           original_text  subjectivity  \\\n",
       "0      RT @i_ameztoy: Extra random image (I):\\n\\nLets...      0.190625   \n",
       "1      RT @IndoPac_Info: #China's media explains the ...      0.100000   \n",
       "2      China even cut off communication, they don't a...      0.000000   \n",
       "3      Putin to #XiJinping : I told you my friend, Ta...      0.350000   \n",
       "4      RT @ChinaUncensored: I’m sorry, I thought Taiw...      0.556250   \n",
       "...                                                  ...           ...   \n",
       "21995  RT @IndoPac_Info: A good infographic of #China...      0.600000   \n",
       "21996  RT @IndoPac_Info: A good infographic of #China...      0.600000   \n",
       "21997                @Reuters Thanks #Pelosi smart move.      0.421429   \n",
       "21998  RT @IndoPac_Info: #Taiwan people's Desire for ...      0.350000   \n",
       "21999  RT @IndoPac_Info: #Taiwan people's Desire for ...      0.350000   \n",
       "\n",
       "           polarity lang  favorite_count  retweet_count original_author  \\\n",
       "0     -1.250000e-01   en               4              2       i_ameztoy   \n",
       "1     -1.000000e-01   en             691            201           ZIisq   \n",
       "2      0.000000e+00   en               0              0       Fin21Free   \n",
       "3      1.000000e-01   en               0              0       Fin21Free   \n",
       "4     -6.938894e-18   en            1521            381  VizziniDolores   \n",
       "...             ...  ...             ...            ...             ...   \n",
       "21995  7.000000e-01   en             507            183       VandelayT   \n",
       "21996  7.000000e-01   en             507            183      sashalenik   \n",
       "21997  2.071429e-01   en               0              0    ZeitounRimal   \n",
       "21998  5.000000e-02   en             199             67   SazzyCowgirl1   \n",
       "21999  5.000000e-02   en             199             67       VandelayT   \n",
       "\n",
       "       followers_count  friends_count possibly_sensitive  \\\n",
       "0                20497           2621                NaN   \n",
       "1                   65            272                NaN   \n",
       "2                   85            392                NaN   \n",
       "3                   85            392                NaN   \n",
       "4                  910           2608                NaN   \n",
       "...                ...            ...                ...   \n",
       "21995               62            471              False   \n",
       "21996               94           1751              False   \n",
       "21997               88              0                NaN   \n",
       "21998              537            317                NaN   \n",
       "21999               62            471                NaN   \n",
       "\n",
       "                               hashtags    user_mentions             place  \n",
       "0                                  City        i_ameztoy               NaN  \n",
       "1                         China, Taiwan     IndoPac_Info               NaN  \n",
       "2                             XiJinping      ZelenskyyUa       Netherlands  \n",
       "3                             XiJinping              NaN       Netherlands  \n",
       "4                                   NaN  ChinaUncensored    Ayent, Schweiz  \n",
       "...                                 ...              ...               ...  \n",
       "21995  China, Taiwan, ChinaTaiwanCrisis     IndoPac_Info               NaN  \n",
       "21996  China, Taiwan, ChinaTaiwanCrisis     IndoPac_Info        Gelendzhik  \n",
       "21997                            Pelosi          Reuters  🇺🇲🇷🇺🇺🇦🇫🇷🇦🇪🇮🇱🏳️‍🌈  \n",
       "21998                     Taiwan, China     IndoPac_Info       Oregon, USA  \n",
       "21999                     Taiwan, China     IndoPac_Info               NaN  \n",
       "\n",
       "[22000 rows x 16 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Yonny\\AppData\\Local\\Temp/ipykernel_4228/1494577151.py:15: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax[0].set_xticklabels(labels, rotation=90)\n",
      "C:\\Users\\Yonny\\AppData\\Local\\Temp/ipykernel_4228/1494577151.py:28: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize polarity column using piechart and barchart\n",
    "# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n",
    "labels = ['neutral', 'positive', 'negative']\n",
    "\n",
    "neutral_count =  len(tweets_df[tweets_df['polarity'] > 0])\n",
    "positive_count = len(tweets_df[tweets_df['polarity'] == 0])\n",
    "negative_count = len(tweets_df[tweets_df['polarity'] <0])\n",
    "sizes = [neutral_count, positive_count, negative_count]\n",
    "# Create a figure for 2 subplots (1 row, 2 columns)\n",
    "fig, ax = plt.subplots(1, 2, figsize = (10,4))\n",
    "\n",
    "# Create a bar plot of score column\n",
    "ax[0].bar(x=labels, height=[neutral_count, positive_count, negative_count], color='orange')\n",
    "ax[0].set_title('Barchart of score column')\n",
    "ax[0].set_xticklabels(labels, rotation=90)\n",
    "\n",
    "# Create a pie chart of score column based on neutral, positive or negative\n",
    "\n",
    "ax[1].pie(sizes,labels=labels, autopct='%1.1f%%',\n",
    "        shadow=True, startangle=90)\n",
    "ax[1].set_title('Piechart of score column')\n",
    "ax[1].legend(labels)\n",
    "\n",
    "# Add a title to the Figure\n",
    "fig.suptitle('Score column plots')\n",
    "\n",
    "# Show the figure\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.2 Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add new column named clean_text to store cleaned original text\n",
    "tweets_df.insert(4,column = 'clean_text',value = tweets_df['original_text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>created_at</th>\n",
       "      <th>source</th>\n",
       "      <th>original_text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>polarity</th>\n",
       "      <th>lang</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>original_author</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>friends_count</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>user_mentions</th>\n",
       "      <th>place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2022-08-07 22:31:20+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>0.190625</td>\n",
       "      <td>-1.250000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>20497</td>\n",
       "      <td>2621</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2022-08-07 22:31:16+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>-1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>691</td>\n",
       "      <td>201</td>\n",
       "      <td>ZIisq</td>\n",
       "      <td>65</td>\n",
       "      <td>272</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China, Taiwan</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2022-08-07 22:31:07+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>ZelenskyyUa</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2022-08-07 22:31:06+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2022-08-07 22:31:04+00:00</td>\n",
       "      <td>Twitter for iPhone</td>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>0.556250</td>\n",
       "      <td>-6.938894e-18</td>\n",
       "      <td>en</td>\n",
       "      <td>1521</td>\n",
       "      <td>381</td>\n",
       "      <td>VizziniDolores</td>\n",
       "      <td>910</td>\n",
       "      <td>2608</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ChinaUncensored</td>\n",
       "      <td>Ayent, Schweiz</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                 created_at               source  \\\n",
       "0           0  2022-08-07 22:31:20+00:00  Twitter for Android   \n",
       "1           1  2022-08-07 22:31:16+00:00  Twitter for Android   \n",
       "2           2  2022-08-07 22:31:07+00:00  Twitter for Android   \n",
       "3           3  2022-08-07 22:31:06+00:00  Twitter for Android   \n",
       "4           4  2022-08-07 22:31:04+00:00   Twitter for iPhone   \n",
       "\n",
       "                                       original_text  \\\n",
       "0  RT @i_ameztoy: Extra random image (I):\\n\\nLets...   \n",
       "1  RT @IndoPac_Info: #China's media explains the ...   \n",
       "2  China even cut off communication, they don't a...   \n",
       "3  Putin to #XiJinping : I told you my friend, Ta...   \n",
       "4  RT @ChinaUncensored: I’m sorry, I thought Taiw...   \n",
       "\n",
       "                                          clean_text  subjectivity  \\\n",
       "0  RT @i_ameztoy: Extra random image (I):\\n\\nLets...      0.190625   \n",
       "1  RT @IndoPac_Info: #China's media explains the ...      0.100000   \n",
       "2  China even cut off communication, they don't a...      0.000000   \n",
       "3  Putin to #XiJinping : I told you my friend, Ta...      0.350000   \n",
       "4  RT @ChinaUncensored: I’m sorry, I thought Taiw...      0.556250   \n",
       "\n",
       "       polarity lang  favorite_count  retweet_count original_author  \\\n",
       "0 -1.250000e-01   en               4              2       i_ameztoy   \n",
       "1 -1.000000e-01   en             691            201           ZIisq   \n",
       "2  0.000000e+00   en               0              0       Fin21Free   \n",
       "3  1.000000e-01   en               0              0       Fin21Free   \n",
       "4 -6.938894e-18   en            1521            381  VizziniDolores   \n",
       "\n",
       "   followers_count  friends_count possibly_sensitive       hashtags  \\\n",
       "0            20497           2621                NaN           City   \n",
       "1               65            272                NaN  China, Taiwan   \n",
       "2               85            392                NaN      XiJinping   \n",
       "3               85            392                NaN      XiJinping   \n",
       "4              910           2608                NaN            NaN   \n",
       "\n",
       "     user_mentions           place  \n",
       "0        i_ameztoy             NaN  \n",
       "1     IndoPac_Info             NaN  \n",
       "2      ZelenskyyUa     Netherlands  \n",
       "3              NaN     Netherlands  \n",
       "4  ChinaUncensored  Ayent, Schweiz  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>created_at</th>\n",
       "      <th>source</th>\n",
       "      <th>original_text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>polarity</th>\n",
       "      <th>lang</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>original_author</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>friends_count</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>user_mentions</th>\n",
       "      <th>place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2022-08-07 22:31:20+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>0.190625</td>\n",
       "      <td>-1.250000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>20497</td>\n",
       "      <td>2621</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City</td>\n",
       "      <td>i_ameztoy</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2022-08-07 22:31:16+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>-1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>691</td>\n",
       "      <td>201</td>\n",
       "      <td>ZIisq</td>\n",
       "      <td>65</td>\n",
       "      <td>272</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China, Taiwan</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2022-08-07 22:31:07+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>ZelenskyyUa</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2022-08-07 22:31:06+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fin21Free</td>\n",
       "      <td>85</td>\n",
       "      <td>392</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XiJinping</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Netherlands</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2022-08-07 22:31:04+00:00</td>\n",
       "      <td>Twitter for iPhone</td>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>0.556250</td>\n",
       "      <td>-6.938894e-18</td>\n",
       "      <td>en</td>\n",
       "      <td>1521</td>\n",
       "      <td>381</td>\n",
       "      <td>VizziniDolores</td>\n",
       "      <td>910</td>\n",
       "      <td>2608</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ChinaUncensored</td>\n",
       "      <td>Ayent, Schweiz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21995</th>\n",
       "      <td>21995</td>\n",
       "      <td>2022-08-06 18:03:29+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>7.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>507</td>\n",
       "      <td>183</td>\n",
       "      <td>VandelayT</td>\n",
       "      <td>62</td>\n",
       "      <td>471</td>\n",
       "      <td>False</td>\n",
       "      <td>China, Taiwan, ChinaTaiwanCrisis</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21996</th>\n",
       "      <td>21996</td>\n",
       "      <td>2022-08-06 18:03:27+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>7.000000e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>507</td>\n",
       "      <td>183</td>\n",
       "      <td>sashalenik</td>\n",
       "      <td>94</td>\n",
       "      <td>1751</td>\n",
       "      <td>False</td>\n",
       "      <td>China, Taiwan, ChinaTaiwanCrisis</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>Gelendzhik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21997</th>\n",
       "      <td>21997</td>\n",
       "      <td>2022-08-06 18:03:27+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>@Reuters Thanks #Pelosi smart move.</td>\n",
       "      <td>@Reuters Thanks #Pelosi smart move.</td>\n",
       "      <td>0.421429</td>\n",
       "      <td>2.071429e-01</td>\n",
       "      <td>en</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>ZeitounRimal</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pelosi</td>\n",
       "      <td>Reuters</td>\n",
       "      <td>🇺🇲🇷🇺🇺🇦🇫🇷🇦🇪🇮🇱🏳️‍🌈</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21998</th>\n",
       "      <td>21998</td>\n",
       "      <td>2022-08-06 18:03:26+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>5.000000e-02</td>\n",
       "      <td>en</td>\n",
       "      <td>199</td>\n",
       "      <td>67</td>\n",
       "      <td>SazzyCowgirl1</td>\n",
       "      <td>537</td>\n",
       "      <td>317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Taiwan, China</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>Oregon, USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21999</th>\n",
       "      <td>21999</td>\n",
       "      <td>2022-08-06 18:03:25+00:00</td>\n",
       "      <td>Twitter for Android</td>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>5.000000e-02</td>\n",
       "      <td>en</td>\n",
       "      <td>199</td>\n",
       "      <td>67</td>\n",
       "      <td>VandelayT</td>\n",
       "      <td>62</td>\n",
       "      <td>471</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Taiwan, China</td>\n",
       "      <td>IndoPac_Info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22000 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                 created_at               source  \\\n",
       "0               0  2022-08-07 22:31:20+00:00  Twitter for Android   \n",
       "1               1  2022-08-07 22:31:16+00:00  Twitter for Android   \n",
       "2               2  2022-08-07 22:31:07+00:00  Twitter for Android   \n",
       "3               3  2022-08-07 22:31:06+00:00  Twitter for Android   \n",
       "4               4  2022-08-07 22:31:04+00:00   Twitter for iPhone   \n",
       "...           ...                        ...                  ...   \n",
       "21995       21995  2022-08-06 18:03:29+00:00  Twitter for Android   \n",
       "21996       21996  2022-08-06 18:03:27+00:00  Twitter for Android   \n",
       "21997       21997  2022-08-06 18:03:27+00:00  Twitter for Android   \n",
       "21998       21998  2022-08-06 18:03:26+00:00  Twitter for Android   \n",
       "21999       21999  2022-08-06 18:03:25+00:00  Twitter for Android   \n",
       "\n",
       "                                           original_text  \\\n",
       "0      RT @i_ameztoy: Extra random image (I):\\n\\nLets...   \n",
       "1      RT @IndoPac_Info: #China's media explains the ...   \n",
       "2      China even cut off communication, they don't a...   \n",
       "3      Putin to #XiJinping : I told you my friend, Ta...   \n",
       "4      RT @ChinaUncensored: I’m sorry, I thought Taiw...   \n",
       "...                                                  ...   \n",
       "21995  RT @IndoPac_Info: A good infographic of #China...   \n",
       "21996  RT @IndoPac_Info: A good infographic of #China...   \n",
       "21997                @Reuters Thanks #Pelosi smart move.   \n",
       "21998  RT @IndoPac_Info: #Taiwan people's Desire for ...   \n",
       "21999  RT @IndoPac_Info: #Taiwan people's Desire for ...   \n",
       "\n",
       "                                              clean_text  subjectivity  \\\n",
       "0      RT @i_ameztoy: Extra random image (I):\\n\\nLets...      0.190625   \n",
       "1      RT @IndoPac_Info: #China's media explains the ...      0.100000   \n",
       "2      China even cut off communication, they don't a...      0.000000   \n",
       "3      Putin to #XiJinping : I told you my friend, Ta...      0.350000   \n",
       "4      RT @ChinaUncensored: I’m sorry, I thought Taiw...      0.556250   \n",
       "...                                                  ...           ...   \n",
       "21995  RT @IndoPac_Info: A good infographic of #China...      0.600000   \n",
       "21996  RT @IndoPac_Info: A good infographic of #China...      0.600000   \n",
       "21997                @Reuters Thanks #Pelosi smart move.      0.421429   \n",
       "21998  RT @IndoPac_Info: #Taiwan people's Desire for ...      0.350000   \n",
       "21999  RT @IndoPac_Info: #Taiwan people's Desire for ...      0.350000   \n",
       "\n",
       "           polarity lang  favorite_count  retweet_count original_author  \\\n",
       "0     -1.250000e-01   en               4              2       i_ameztoy   \n",
       "1     -1.000000e-01   en             691            201           ZIisq   \n",
       "2      0.000000e+00   en               0              0       Fin21Free   \n",
       "3      1.000000e-01   en               0              0       Fin21Free   \n",
       "4     -6.938894e-18   en            1521            381  VizziniDolores   \n",
       "...             ...  ...             ...            ...             ...   \n",
       "21995  7.000000e-01   en             507            183       VandelayT   \n",
       "21996  7.000000e-01   en             507            183      sashalenik   \n",
       "21997  2.071429e-01   en               0              0    ZeitounRimal   \n",
       "21998  5.000000e-02   en             199             67   SazzyCowgirl1   \n",
       "21999  5.000000e-02   en             199             67       VandelayT   \n",
       "\n",
       "       followers_count  friends_count possibly_sensitive  \\\n",
       "0                20497           2621                NaN   \n",
       "1                   65            272                NaN   \n",
       "2                   85            392                NaN   \n",
       "3                   85            392                NaN   \n",
       "4                  910           2608                NaN   \n",
       "...                ...            ...                ...   \n",
       "21995               62            471              False   \n",
       "21996               94           1751              False   \n",
       "21997               88              0                NaN   \n",
       "21998              537            317                NaN   \n",
       "21999               62            471                NaN   \n",
       "\n",
       "                               hashtags    user_mentions             place  \n",
       "0                                  City        i_ameztoy               NaN  \n",
       "1                         China, Taiwan     IndoPac_Info               NaN  \n",
       "2                             XiJinping      ZelenskyyUa       Netherlands  \n",
       "3                             XiJinping              NaN       Netherlands  \n",
       "4                                   NaN  ChinaUncensored    Ayent, Schweiz  \n",
       "...                                 ...              ...               ...  \n",
       "21995  China, Taiwan, ChinaTaiwanCrisis     IndoPac_Info               NaN  \n",
       "21996  China, Taiwan, ChinaTaiwanCrisis     IndoPac_Info        Gelendzhik  \n",
       "21997                            Pelosi          Reuters  🇺🇲🇷🇺🇺🇦🇫🇷🇦🇪🇮🇱🏳️‍🌈  \n",
       "21998                     Taiwan, China     IndoPac_Info       Oregon, USA  \n",
       "21999                     Taiwan, China     IndoPac_Info               NaN  \n",
       "\n",
       "[22000 rows x 17 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add new column named sentimnt to where the text is positive,negative or neutral\n",
    "# tweets_df.insert(7,column = 'sentiment',value = tweets_df['polarity'])\n",
    "tweets_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# \n",
    "tweets_df = tweets_df[['original_text','clean_text','polarity']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def text_category (polarity):\n",
    "    if polarity > 0:\n",
    "        return 'positive'\n",
    "    if polarity < 0:\n",
    "        return 'negative'\n",
    "    else:\n",
    "        return 'neutral'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>original_text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>polarity</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>-1.250000e-01</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>-1.000000e-01</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>-6.938894e-18</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       original_text  \\\n",
       "0  RT @i_ameztoy: Extra random image (I):\\n\\nLets...   \n",
       "1  RT @IndoPac_Info: #China's media explains the ...   \n",
       "2  China even cut off communication, they don't a...   \n",
       "3  Putin to #XiJinping : I told you my friend, Ta...   \n",
       "4  RT @ChinaUncensored: I’m sorry, I thought Taiw...   \n",
       "\n",
       "                                          clean_text      polarity sentiment  \n",
       "0  RT @i_ameztoy: Extra random image (I):\\n\\nLets... -1.250000e-01  negative  \n",
       "1  RT @IndoPac_Info: #China's media explains the ... -1.000000e-01  negative  \n",
       "2  China even cut off communication, they don't a...  0.000000e+00   neutral  \n",
       "3  Putin to #XiJinping : I told you my friend, Ta...  1.000000e-01  positive  \n",
       "4  RT @ChinaUncensored: I’m sorry, I thought Taiw... -6.938894e-18  negative  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score= pd.Series([text_category(row_value) for row_value in tweets_df['polarity']])\n",
    "tweets_df = pd.concat([tweets_df, score.rename('sentiment')], axis=1)\n",
    "tweets_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install gensim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import gensim\n",
    "from gensim.models import CoherenceModel\n",
    "from gensim import corpora\n",
    "from pprint import pprint\n",
    "import string\n",
    "import re\n",
    "import emoji\n",
    "import nltk\n",
    "#nltk.download('words')\n",
    "words = set(nltk.corpus.words.words())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>original_text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>polarity</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>: Extra random image ( I ): focus in one very ...</td>\n",
       "      <td>-1.250000e-01</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>: China ' s media the military for each area o...</td>\n",
       "      <td>-1.000000e-01</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>China even cut off communication , they don ' ...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>to : I told you my friend , will be a vassal s...</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>: I ’ m sorry , I thought was an independent c...</td>\n",
       "      <td>-6.938894e-18</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       original_text  \\\n",
       "0  RT @i_ameztoy: Extra random image (I):\\n\\nLets...   \n",
       "1  RT @IndoPac_Info: #China's media explains the ...   \n",
       "2  China even cut off communication, they don't a...   \n",
       "3  Putin to #XiJinping : I told you my friend, Ta...   \n",
       "4  RT @ChinaUncensored: I’m sorry, I thought Taiw...   \n",
       "\n",
       "                                          clean_text      polarity sentiment  \n",
       "0  : Extra random image ( I ): focus in one very ... -1.250000e-01  negative  \n",
       "1  : China ' s media the military for each area o... -1.000000e-01  negative  \n",
       "2  China even cut off communication , they don ' ...  0.000000e+00   neutral  \n",
       "3  to : I told you my friend , will be a vassal s...  1.000000e-01  positive  \n",
       "4  : I ’ m sorry , I thought was an independent c... -6.938894e-18  negative  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "def cleaner(tweet):\n",
    "    tweet = re.sub(\"@[A-Za-z0-9]+\",\"\",tweet) #Remove @ sign\n",
    "    tweet = re.sub(r\"(?:\\@|http?\\://|https?\\://|www)\\S+\", \"\", tweet) #Remove http links\n",
    "    tweet = \" \".join(tweet.split())\n",
    "    tweet = ''.join(c for c in tweet if c not in emoji.UNICODE_EMOJI) #Remove Emojis\n",
    "    tweet = tweet.replace(\"#\", \"\").replace(\"_\", \" \") #Remove hashtag sign but keep the text\n",
    "    tweet = \" \".join(w for w in nltk.wordpunct_tokenize(tweet) \\\n",
    "         if w.lower() in words or not w.isalpha())\n",
    "    return tweet\n",
    "\n",
    "tweets_df['clean_text'] = tweets_df['original_text'].map(lambda x: cleaner(x))\n",
    "tweets_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "class PrepareData:\n",
    "  def __init__(self,df):\n",
    "    self.df=df\n",
    "    \n",
    "  def preprocess_data(self):\n",
    "    #tweets_df = self.df.loc[self.df['lang'] ==\"en\"]\n",
    "\n",
    "    \n",
    "    #text Preprocessing\n",
    "    tweets_df['clean_text']=tweets_df['clean_text'].astype(str)\n",
    "    tweets_df['clean_text'] = tweets_df['clean_text'].apply(lambda x: x.lower())\n",
    "    tweets_df['clean_text']= tweets_df['clean_text'].apply(lambda x: x.translate(str.maketrans(' ', ' ', string.punctuation)))\n",
    "    \n",
    "    #Converting tweets to list of words For feature engineering\n",
    "    sentence_list = [tweet for tweet in tweets_df['clean_text']]\n",
    "    word_list = [sent.split() for sent in sentence_list]\n",
    "    # print(word_list)\n",
    "\n",
    "    #Create dictionary which contains Id and word \n",
    "    word_to_id = corpora.Dictionary(word_list) #generate unique tokens\n",
    "    #  we can see the word to unique integer mapping\n",
    "    # print(word_to_id.token2id)\n",
    "    # using bag of words(bow), we create a corpus that contains the word id and its frequency in each document.\n",
    "    corpus_1= [word_to_id.doc2bow(tweet) for tweet in word_list]\n",
    "    # TFIDF\n",
    "\n",
    "    return tweets_df['clean_text'],word_list, word_to_id, corpus_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "PrepareData_obj=PrepareData(tweets_df)\n",
    "tweets_df['clean_text'],word_list ,id2word,corpus=PrepareData_obj.preprocess_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>original_text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>polarity</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RT @i_ameztoy: Extra random image (I):\\n\\nLets...</td>\n",
       "      <td>extra random image  i  focus in one very spec...</td>\n",
       "      <td>-1.250000e-01</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RT @IndoPac_Info: #China's media explains the ...</td>\n",
       "      <td>china  s media the military for each area of ...</td>\n",
       "      <td>-1.000000e-01</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>China even cut off communication, they don't a...</td>\n",
       "      <td>china even cut off communication  they don  t ...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Putin to #XiJinping : I told you my friend, Ta...</td>\n",
       "      <td>to  i told you my friend  will be a vassal sta...</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RT @ChinaUncensored: I’m sorry, I thought Taiw...</td>\n",
       "      <td>i ’ m sorry  i thought was an independent cou...</td>\n",
       "      <td>-6.938894e-18</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21995</th>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>a good of china  s missile on on august 4th</td>\n",
       "      <td>7.000000e-01</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21996</th>\n",
       "      <td>RT @IndoPac_Info: A good infographic of #China...</td>\n",
       "      <td>a good of china  s missile on on august 4th</td>\n",
       "      <td>7.000000e-01</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21997</th>\n",
       "      <td>@Reuters Thanks #Pelosi smart move.</td>\n",
       "      <td>thanks smart move</td>\n",
       "      <td>2.071429e-01</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21998</th>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>people  s desire for unification with china n...</td>\n",
       "      <td>5.000000e-02</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21999</th>\n",
       "      <td>RT @IndoPac_Info: #Taiwan people's Desire for ...</td>\n",
       "      <td>people  s desire for unification with china n...</td>\n",
       "      <td>5.000000e-02</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           original_text  \\\n",
       "0      RT @i_ameztoy: Extra random image (I):\\n\\nLets...   \n",
       "1      RT @IndoPac_Info: #China's media explains the ...   \n",
       "2      China even cut off communication, they don't a...   \n",
       "3      Putin to #XiJinping : I told you my friend, Ta...   \n",
       "4      RT @ChinaUncensored: I’m sorry, I thought Taiw...   \n",
       "...                                                  ...   \n",
       "21995  RT @IndoPac_Info: A good infographic of #China...   \n",
       "21996  RT @IndoPac_Info: A good infographic of #China...   \n",
       "21997                @Reuters Thanks #Pelosi smart move.   \n",
       "21998  RT @IndoPac_Info: #Taiwan people's Desire for ...   \n",
       "21999  RT @IndoPac_Info: #Taiwan people's Desire for ...   \n",
       "\n",
       "                                              clean_text      polarity  \\\n",
       "0       extra random image  i  focus in one very spec... -1.250000e-01   \n",
       "1       china  s media the military for each area of ... -1.000000e-01   \n",
       "2      china even cut off communication  they don  t ...  0.000000e+00   \n",
       "3      to  i told you my friend  will be a vassal sta...  1.000000e-01   \n",
       "4       i ’ m sorry  i thought was an independent cou... -6.938894e-18   \n",
       "...                                                  ...           ...   \n",
       "21995       a good of china  s missile on on august 4th   7.000000e-01   \n",
       "21996       a good of china  s missile on on august 4th   7.000000e-01   \n",
       "21997                                 thanks smart move   2.071429e-01   \n",
       "21998   people  s desire for unification with china n...  5.000000e-02   \n",
       "21999   people  s desire for unification with china n...  5.000000e-02   \n",
       "\n",
       "      sentiment  \n",
       "0      negative  \n",
       "1      negative  \n",
       "2       neutral  \n",
       "3      positive  \n",
       "4      negative  \n",
       "...         ...  \n",
       "21995  positive  \n",
       "21996  positive  \n",
       "21997  positive  \n",
       "21998  positive  \n",
       "21999  positive  \n",
       "\n",
       "[22000 rows x 4 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print(corpus)\n",
    "tweets_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "id_words = [[(id2word[id], count) for id, count in line] for line in corpus]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(id_words)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.3 Topic Modelling using Latent Dirichlet Allocation(LDA)\n",
    "#### The purpose of LDA is mapping each teweets in our corpus to a set of topics which covers a good deal of the words in the tweet\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build LDA model\n",
    "lda_model = gensim.models.ldamodel.LdaModel(corpus,\n",
    "                                           id2word=id2word,\n",
    "                                           num_topics=5, \n",
    "                                           random_state=100,\n",
    "                                           update_every=1,\n",
    "                                           chunksize=100,\n",
    "                                           passes=10,\n",
    "                                           alpha='auto',\n",
    "                                           per_word_topics=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0,\n",
      "  '0.072*\"the\" + 0.052*\"is\" + 0.042*\"china\" + 0.033*\"this\" + 0.032*\"in\" + '\n",
      "  '0.028*\"of\" + 0.028*\"s\" + 0.026*\"…\" + 0.024*\"that\" + 0.022*\"on\"'),\n",
      " (1,\n",
      "  '0.053*\"to\" + 0.037*\"…\" + 0.036*\"the\" + 0.030*\"it\" + 0.024*\"of\" + 0.023*\"s\" '\n",
      "  '+ 0.022*\"not\" + 0.018*\"island\" + 0.018*\"in\" + 0.017*\"we\"'),\n",
      " (2,\n",
      "  '0.069*\"on\" + 0.043*\"china\" + 0.042*\"’\" + 0.039*\"s\" + 0.036*\"of\" + 0.036*\"a\" '\n",
      "  '+ 0.035*\"…\" + 0.024*\"missile\" + 0.023*\"military\" + 0.021*\"an\"'),\n",
      " (3,\n",
      "  '0.042*\"part\" + 0.038*\"out\" + 0.033*\"speaker\" + 0.032*\"t\" + 0.030*\"’\" + '\n",
      "  '0.028*\"for\" + 0.027*\"their\" + 0.023*\"…\" + 0.022*\"5\" + 0.020*\"and\"'),\n",
      " (4,\n",
      "  '0.075*\"the\" + 0.062*\"to\" + 0.042*\"…\" + 0.041*\"s\" + 0.038*\"china\" + '\n",
      "  '0.035*\"and\" + 0.029*\"us\" + 0.024*\"visit\" + 0.022*\"a\" + 0.021*\"of\"')]\n"
     ]
    }
   ],
   "source": [
    "pprint(lda_model.print_topics())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0,\n",
      "  [('the', 0.0720394),\n",
      "   ('is', 0.051672734),\n",
      "   ('china', 0.04224037),\n",
      "   ('this', 0.033075012),\n",
      "   ('in', 0.032355797),\n",
      "   ('of', 0.027817756),\n",
      "   ('s', 0.027659101),\n",
      "   ('…', 0.026197946),\n",
      "   ('that', 0.023988543),\n",
      "   ('on', 0.021984821)]),\n",
      " (1,\n",
      "  [('to', 0.052805908),\n",
      "   ('…', 0.03654342),\n",
      "   ('the', 0.03555156),\n",
      "   ('it', 0.030056885),\n",
      "   ('of', 0.024076967),\n",
      "   ('s', 0.02344202),\n",
      "   ('not', 0.022206457),\n",
      "   ('island', 0.018373588),\n",
      "   ('in', 0.017870707),\n",
      "   ('we', 0.016598973)]),\n",
      " (2,\n",
      "  [('on', 0.06912865),\n",
      "   ('china', 0.043411385),\n",
      "   ('’', 0.04203578),\n",
      "   ('s', 0.039337996),\n",
      "   ('of', 0.035956223),\n",
      "   ('a', 0.03587063),\n",
      "   ('…', 0.035150617),\n",
      "   ('missile', 0.024428003),\n",
      "   ('military', 0.023469845),\n",
      "   ('an', 0.020680407)]),\n",
      " (3,\n",
      "  [('part', 0.041534945),\n",
      "   ('out', 0.038097065),\n",
      "   ('speaker', 0.03316909),\n",
      "   ('t', 0.031809844),\n",
      "   ('’', 0.029987387),\n",
      "   ('for', 0.027728545),\n",
      "   ('their', 0.026711373),\n",
      "   ('…', 0.02333698),\n",
      "   ('5', 0.02189074),\n",
      "   ('and', 0.019878184)]),\n",
      " (4,\n",
      "  [('the', 0.07540812),\n",
      "   ('to', 0.062312294),\n",
      "   ('…', 0.04226574),\n",
      "   ('s', 0.04094148),\n",
      "   ('china', 0.038096923),\n",
      "   ('and', 0.035040535),\n",
      "   ('us', 0.029488726),\n",
      "   ('visit', 0.02444664),\n",
      "   ('a', 0.02151323),\n",
      "   ('of', 0.02108042)])]\n"
     ]
    }
   ],
   "source": [
    "pprint(lda_model.show_topics(formatted=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Compute Perplexity\n",
    "\n",
    "# #It's a measure of how good the model is. The lower the better. Perplexity is a negative value\n",
    "# print('\\nPerplexity: ', lda_model.log_perplexity(corpus))  \n",
    "# doc_lda = lda_model[corpus]\n",
    "\n",
    "\n",
    "# # Compute Coherence Score\n",
    "# coherence_model_lda = CoherenceModel(model=lda_model, texts=word_list, dictionary=id2word, coherence='c_v')\n",
    "# coherence_lda = coherence_model_lda.get_coherence()\n",
    "# print('\\n Ldamodel Coherence Score/Accuracy on Tweets: ', coherence_lda)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %pip install pyLDAvis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.0/pyLDAvis/js/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el422821496403261609454799986\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el422821496403261609454799986_data = {\"mdsDat\": {\"x\": [-0.050110817971150724, 0.06957428899134267, -0.21121904171579955, -0.09150326678689753, 0.28325883748250524], \"y\": [-0.08040527778430769, -0.27522996601728217, 0.12295648349276454, 0.06622283656040895, 0.1664559237484167], \"topics\": [1, 2, 3, 4, 5], \"cluster\": [1, 1, 1, 1, 1], \"Freq\": [27.425051135764328, 22.908152614613098, 21.93335339153023, 18.1222020085871, 9.611240849505247]}, \"tinfo\": {\"Term\": [\"on\", \"to\", \"\\u2019\", \"us\", \"it\", \"part\", \"is\", \"this\", \"visit\", \"out\", \"china\", \"missile\", \"for\", \"t\", \"not\", \"speaker\", \"an\", \"was\", \"that\", \"their\", \"military\", \"are\", \"the\", \"we\", \"have\", \"august\", \"good\", \"as\", \"video\", \"5\", \"us\", \"visit\", \"have\", \"so\", \"nancy\", \"japan\", \"national\", \"u\", \"responsible\", \"democracy\", \"respond\", \"trip\", \"high\", \"talking\", \"aircraft\", \"showing\", \"between\", \"defense\", \"rise\", \"into\", \"record\", \"stopped\", \"low\", \"desire\", \"does\", \"c\", \"firm\", \"2\", \"sovereignty\", \"unification\", \"over\", \"should\", \"stop\", \"as\", \"house\", \"to\", \"and\", \"the\", \"s\", \"china\", \"\\u2026\", \"at\", \"its\", \"a\", \"for\", \"with\", \"of\", \"in\", \"strait\", \"is\", \"about\", \"by\", \"\\u2019\", \"it\", \"not\", \"we\", \"be\", \"said\", \"people\", \"minister\", \"your\", \"russia\", \"army\", \"her\", \"watch\", \"head\", \"all\", \"attack\", \"our\", \"restricted\", \"did\", \"she\", \"democratic\", \"or\", \"thing\", \"had\", \"delegation\", \"because\", \"unless\", \"must\", \"cheating\", \"set\", \"father\", \"3\", \"now\", \"you\", \"they\", \"war\", \"island\", \"near\", \"will\", \"to\", \"from\", \"\\u2026\", \"about\", \"the\", \"of\", \"s\", \"in\", \"that\", \"a\", \"is\", \"and\", \"missile\", \"was\", \"an\", \"august\", \"good\", \"4th\", \"\\u201c\", \"around\", \"after\", \"dead\", \"\\u201d\", \"when\", \"m\", \"fired\", \"his\", \"day\", \"live\", \"own\", \"foreign\", \"d\", \"amid\", \"independent\", \"ministry\", \"tension\", \"against\", \"thought\", \"here\", \"pain\", \"fire\", \"teen\", \"small\", \"matter\", \"on\", \"military\", \"\\u2019\", \"i\", \"a\", \"china\", \"of\", \"s\", \"\\u2026\", \"in\", \"its\", \"the\", \"with\", \"are\", \"video\", \"time\", \"what\", \"no\", \"president\", \"how\", \"just\", \"hotel\", \"found\", \"support\", \"do\", \"official\", \"li\", \"more\", \"again\", \"maybe\", \"check\", \"today\", \"speech\", \"based\", \"crisis\", \"where\", \"there\", \"forget\", \"one\", \"easily\", \"million\", \"funny\", \"23\", \"would\", \"this\", \"is\", \"that\", \"the\", \"china\", \"in\", \"for\", \"by\", \"of\", \"s\", \"on\", \"\\u2026\", \"a\", \"and\", \"part\", \"out\", \"speaker\", \"5\", \"1\", \"long\", \"air\", \"don\", \"could\", \"under\", \"take\", \"160\", \"territory\", \"international\", \"ballistic\", \"whatever\", \"f\", \"always\", \"coming\", \"fact\", \"bunch\", \"able\", \"quick\", \"sea\", \"drill\", \"shipping\", \"secure\", \"unelected\", \"\\ud83c\\uddf8\\ud83c\\uddf4\", \"400\", \"too\", \"up\", \"their\", \"t\", \"world\", \"for\", \"\\u2019\", \"been\", \"with\", \"by\", \"and\", \"\\u2026\", \"from\", \"that\", \"of\", \"is\", \"the\", \"china\"], \"Freq\": [6917.0, 11058.0, 4813.0, 2922.0, 2488.0, 1442.0, 6446.0, 2588.0, 2422.0, 1323.0, 10347.0, 1936.0, 3939.0, 1590.0, 1838.0, 1152.0, 1639.0, 1608.0, 3011.0, 1181.0, 2201.0, 1231.0, 17220.0, 1374.0, 1519.0, 1273.0, 1270.0, 2295.0, 1052.0, 760.0, 2921.487907856331, 2421.961688828485, 1518.765469497851, 858.4660975828523, 746.707133464264, 721.8325380797065, 610.9180512157048, 536.1559101160341, 404.25432966124725, 397.8373636013327, 388.0246347837912, 385.51339332647507, 376.9443827447381, 356.38993092906986, 357.0422382845043, 358.5541547459052, 342.02779715412953, 347.79354000040047, 327.2046955164288, 329.51601661413, 317.3617260629746, 314.455118854672, 315.6690577914962, 316.0935569697578, 317.3362141306181, 312.2952546718469, 311.14221221008717, 308.6739442880154, 300.9011551177459, 299.22359563080045, 776.8781997675503, 634.2518273800524, 389.6041140389283, 1854.505451866265, 427.4605000301189, 6173.363182457685, 3471.5131747030623, 7470.784727878159, 4056.127823921164, 3774.3137001048062, 4187.323927939068, 600.8223844575799, 898.6644143772027, 2131.3447027394045, 1485.8721462244116, 1107.2401007139106, 2088.465649298809, 1736.8944287613713, 506.2361340397749, 1452.39430905774, 656.3099607928799, 726.3107818152971, 440.8998446062135, 2487.3372472122774, 1837.6804298311426, 1373.6368732499525, 1105.639752129012, 976.2100744431966, 932.1897551870192, 884.5082564384604, 771.4422106287586, 758.3947885707273, 719.2740251980473, 688.0616684873795, 665.7724348667446, 643.4571127218134, 622.2577782631756, 618.600375248462, 558.8288300661217, 531.448750407474, 457.5825427885557, 438.19691953306307, 438.4776890870111, 410.32713091317873, 422.9943233268504, 427.7200841666606, 389.5136522799158, 383.4655462241126, 354.19113912476024, 348.88803962762796, 335.0542624340129, 328.1724025943477, 320.28941008561964, 872.7830639899628, 963.0211500790856, 1309.9545156942982, 1370.7558061443572, 824.7555165734857, 1520.4939163786096, 915.1822724040481, 777.1083144078275, 4369.9173760993635, 978.2442856995522, 3024.126245325778, 916.2265840856279, 2942.0453509988993, 1992.473162746187, 1939.9286397552428, 1478.8783656160597, 979.860695212303, 1203.1813918855316, 1140.201305034125, 858.662351564575, 1935.5020492168533, 1607.614346182143, 1638.569104780443, 1272.4131764982217, 1269.2408837805383, 1108.5075489312678, 1026.8279109477646, 885.1932688454298, 868.8778405024386, 777.069888742282, 730.9093032337845, 724.7569444215762, 693.9749315141833, 649.2290011275909, 610.2603109202611, 540.9477443026594, 510.06762571561626, 494.9924833926023, 478.56540864621843, 445.94462448770685, 395.5585214660041, 367.98909138617694, 373.47039111546803, 346.92009419972374, 347.8627425672986, 340.07671572818197, 329.86822758451865, 312.8582006988071, 313.6520855837383, 312.81724646623405, 334.88073048581623, 320.75941592899846, 5477.264814990049, 1859.584413486439, 3330.6177960743476, 1234.6557353910175, 2842.1348957099644, 3439.6109555276544, 2848.9166214584166, 3116.864447613354, 2785.0861662756165, 1625.9947533437348, 738.8812106347957, 1563.8167829974036, 579.1068689504242, 1230.71316312489, 1051.7550012133017, 968.6906300984399, 889.3177717077817, 832.8816530128669, 811.2220388069727, 815.4500820276996, 860.6685674278057, 764.7111855733664, 760.0205067381373, 728.2493656315166, 701.7166522215755, 627.0137430787807, 591.5773060790364, 598.7687657524352, 564.9522850359434, 527.9597876575325, 519.8782360842765, 460.52653141106737, 438.444582347285, 434.7514234499669, 417.86351637815176, 413.61727379910525, 396.53411230511784, 379.5437157145918, 378.1365730333977, 372.6315567462581, 367.7413861173218, 366.55315397564664, 366.18721578926795, 371.2987357327074, 2165.267832983908, 3382.7745418143772, 1570.418788324823, 4716.0859930144225, 2765.2813494882776, 2118.184111506514, 1366.3119787761998, 1094.5091654612518, 1821.0996153791432, 1810.7132385376976, 1439.2443982498426, 1715.0581428425496, 645.8288920818572, 593.6681288423628, 1442.0945879977294, 1322.731273241173, 1151.6318567792089, 760.04719916425, 581.4679236003399, 578.5932286587819, 551.6950318988075, 502.92144848495275, 465.24561936360374, 366.22398385532347, 302.2924006535672, 281.6601865011282, 275.55639900536596, 265.8861136735421, 263.2504269394545, 250.9584076627635, 250.05074881358652, 233.12443104721984, 230.42800198508877, 168.7503681984334, 165.3821842819301, 162.2255880276851, 160.97525320222906, 158.38926620633822, 157.78866572665837, 156.266130253095, 153.82916163292316, 153.78620385660926, 153.78009243792403, 139.77089385287738, 196.87631340316733, 569.4943286384786, 927.4196849657782, 1104.4387703097814, 504.24549219344044, 962.735924434753, 1041.1630167047122, 285.9364334611659, 603.0945205432987, 534.4998925491622, 690.1711780502279, 810.260684557223, 404.736042598994, 461.2312256761216, 529.6227217539586, 470.585641201455, 528.1068959067295, 367.83170733167117], \"Total\": [6917.0, 11058.0, 4813.0, 2922.0, 2488.0, 1442.0, 6446.0, 2588.0, 2422.0, 1323.0, 10347.0, 1936.0, 3939.0, 1590.0, 1838.0, 1152.0, 1639.0, 1608.0, 3011.0, 1181.0, 2201.0, 1231.0, 17220.0, 1374.0, 1519.0, 1273.0, 1270.0, 2295.0, 1052.0, 760.0, 2922.4531743890384, 2422.928110131982, 1519.7337222356439, 859.4610698853686, 747.6703985203517, 722.8136478523619, 611.8768922112688, 537.1224474361497, 405.2103057796936, 398.79840723308405, 388.98030047944354, 386.47597546225944, 377.93425805526243, 357.3432153196344, 358.00312203313285, 359.52821591852756, 342.9845790142575, 348.7809860792679, 328.16242820316523, 330.4878855480636, 318.3163228223291, 315.40632307833954, 316.62449949785275, 317.05031763992156, 318.29884756026706, 313.25234729080466, 312.1105915942658, 309.64585306500993, 301.8597479855352, 300.1771796714448, 827.8850338123043, 667.8734275435874, 397.5573187090982, 2295.193248734365, 445.05452330528664, 11058.636918713426, 6025.480900950219, 17220.839750795614, 11061.592749355776, 10347.246084232735, 12521.855166940235, 800.7054071678288, 1638.326250500406, 6822.8433038684525, 3939.6494692849597, 2855.872855267006, 9280.577770636513, 6960.302622798749, 680.8716527300812, 6446.1590680854315, 1573.3111624646776, 2787.4836881983433, 4813.104376632687, 2488.315874606443, 1838.6550316954092, 1374.6048876994548, 1106.6177205088827, 977.1806194482941, 933.1708258297745, 885.4874871101792, 772.435586109193, 759.3783077386113, 720.2361578336174, 689.0299173602334, 666.7663113387919, 644.4573445339371, 623.2342233816896, 619.5791899292458, 559.8093349690322, 532.4070774788022, 458.57706654983343, 439.1598149877814, 439.44562683955996, 411.2989206011779, 423.99825065829606, 428.7427321505129, 390.48563726358134, 384.50477602717706, 355.15634590980784, 349.8510015119409, 336.075410626103, 329.1744940509145, 321.34230157934826, 889.0721434829142, 984.3449040677657, 1413.134298985031, 1523.4856010682495, 894.8516485170506, 1942.6959892968657, 1072.15534217285, 940.163553392799, 11058.636918713426, 1747.8390989156833, 12521.855166940235, 1573.3111624646776, 17220.839750795614, 9280.577770636513, 11061.592749355776, 6960.302622798749, 3011.9287734363766, 6822.8433038684525, 6446.1590680854315, 6025.480900950219, 1936.4742492999467, 1608.5877904937101, 1639.5632812121569, 1273.3754458466808, 1270.2079353325937, 1109.4672337900456, 1027.8175323941791, 886.167201457729, 869.855394845628, 778.070170635623, 731.8866036957127, 725.7382969708134, 694.9413712057876, 650.2333999892323, 611.2356053085624, 541.9198383388882, 511.03536881325203, 495.96180206889886, 479.55282918748196, 446.9143596760579, 396.5254000958855, 368.9534754209221, 374.45207612315227, 347.89471195835785, 348.8406557896562, 341.038610305148, 330.8750757858187, 313.8206057755503, 314.6169331623948, 313.7795685481487, 336.05606391288376, 321.7532150891006, 6917.279211689985, 2201.8874538292634, 4813.104376632687, 1686.740646870803, 6822.8433038684525, 10347.246084232735, 9280.577770636513, 11061.592749355776, 12521.855166940235, 6960.302622798749, 1638.326250500406, 17220.839750795614, 2855.872855267006, 1231.687435050965, 1052.7213735865473, 969.6714066188063, 890.3004159836576, 833.8491427501663, 812.1845174239585, 816.4301661623095, 861.7067924110362, 765.6748882769142, 760.9865963661061, 729.2419517781707, 702.7032156822889, 628.0054205367535, 592.5365991139632, 599.7464211069079, 565.9188522602412, 528.9237625398426, 520.8422648538306, 461.51554460985085, 439.40020735736, 435.7076580979072, 418.84433705005125, 414.59001069830623, 397.50223388368545, 380.52007092856235, 379.11264915810654, 373.5937568567526, 368.70469636857433, 367.51514923477464, 367.1512450540443, 372.29252319993617, 2588.6104827401286, 6446.1590680854315, 3011.9287734363766, 17220.839750795614, 10347.246084232735, 6960.302622798749, 3939.6494692849597, 2787.4836881983433, 9280.577770636513, 11061.592749355776, 6917.279211689985, 12521.855166940235, 6822.8433038684525, 6025.480900950219, 1442.9231751646373, 1323.5706546697486, 1152.4596542464776, 760.8822480768017, 582.3004789440884, 579.4264895165109, 552.5307048693168, 503.7435240716754, 466.07837046947304, 367.04602974237014, 303.12281035017685, 282.4819920311714, 276.3751012197203, 266.7114247855528, 264.0711957526668, 251.78067615577731, 250.87318588862237, 233.95933443510748, 231.2660516413231, 169.5660940021573, 166.19801088940162, 163.0417254104249, 161.79049197617215, 159.21181665792543, 158.61552958817097, 157.08907677151052, 154.64306438574238, 154.60012123520985, 154.59400418366008, 140.58648702681683, 199.84032379383888, 619.04741131773, 1181.703772502769, 1590.486754763135, 1097.3860702525399, 3939.6494692849597, 4813.104376632687, 504.69386311709695, 2855.872855267006, 2787.4836881983433, 6025.480900950219, 12521.855166940235, 1747.8390989156833, 3011.9287734363766, 9280.577770636513, 6446.1590680854315, 17220.839750795614, 10347.246084232735], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -3.5237, -3.7113, -4.1779, -4.7484, -4.8879, -4.9218, -5.0886, -5.2192, -5.5016, -5.5176, -5.5425, -5.549, -5.5715, -5.6276, -5.6257, -5.6215, -5.6687, -5.652, -5.713, -5.706, -5.7436, -5.7528, -5.7489, -5.7476, -5.7436, -5.7596, -5.7633, -5.7713, -5.7968, -5.8024, -4.8483, -5.0511, -5.5385, -3.9782, -5.4457, -2.7756, -3.3512, -2.5848, -3.1956, -3.2676, -3.1638, -5.1053, -4.7027, -3.8391, -4.1998, -4.494, -3.8594, -4.0437, -5.2766, -4.2226, -5.017, -4.9156, -5.4148, -3.5047, -3.8074, -4.0984, -4.3155, -4.44, -4.4861, -4.5386, -4.6754, -4.6924, -4.7454, -4.7898, -4.8227, -4.8568, -4.8903, -4.8962, -4.9978, -5.048, -5.1977, -5.241, -5.2403, -5.3067, -5.2763, -5.2652, -5.3587, -5.3744, -5.4538, -5.4689, -5.5093, -5.5301, -5.5544, -4.5519, -4.4536, -4.1459, -4.1005, -4.6085, -3.9968, -4.5045, -4.6681, -2.9411, -4.4379, -3.3093, -4.5034, -3.3368, -3.7265, -3.7532, -4.0246, -4.4362, -4.2309, -4.2847, -4.5683, -3.712, -3.8976, -3.8786, -4.1315, -4.134, -4.2694, -4.3459, -4.4943, -4.5129, -4.6246, -4.6859, -4.6943, -4.7377, -4.8044, -4.8663, -4.9868, -5.0456, -5.0756, -5.1094, -5.18, -5.2998, -5.3721, -5.3573, -5.4311, -5.4283, -5.451, -5.4815, -5.5344, -5.5319, -5.5345, -5.4664, -5.5095, -2.6718, -3.752, -3.1692, -4.1616, -3.3278, -3.137, -3.3255, -3.2356, -3.3481, -3.8863, -4.675, -3.9253, -4.9187, -3.9739, -4.1311, -4.2133, -4.2988, -4.3644, -4.3907, -4.3855, -4.3316, -4.4498, -4.4559, -4.4986, -4.5357, -4.6483, -4.7065, -4.6944, -4.7525, -4.8203, -4.8357, -4.9569, -5.006, -5.0145, -5.0541, -5.0643, -5.1065, -5.1503, -5.154, -5.1687, -5.1819, -5.1851, -5.1861, -5.1723, -3.409, -2.9628, -3.7302, -2.6305, -3.1644, -3.431, -3.8694, -4.0912, -3.5821, -3.5878, -3.8174, -3.6421, -4.6187, -4.703, -3.1812, -3.2676, -3.4061, -3.8217, -4.0895, -4.0945, -4.1421, -4.2346, -4.3125, -4.5518, -4.7437, -4.8144, -4.8363, -4.872, -4.882, -4.9298, -4.9334, -5.0035, -5.0151, -5.3267, -5.3468, -5.3661, -5.3738, -5.39, -5.3938, -5.4035, -5.4192, -5.4195, -5.4195, -5.5151, -5.1725, -4.1103, -3.6227, -3.448, -4.232, -3.5853, -3.507, -4.7993, -4.053, -4.1737, -3.9181, -3.7577, -4.4518, -4.3212, -4.1829, -4.3011, -4.1858, -4.5474], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.2934, 1.2933, 1.2931, 1.2926, 1.2924, 1.2924, 1.2921, 1.2919, 1.2914, 1.2913, 1.2913, 1.2912, 1.2911, 1.291, 1.291, 1.291, 1.2909, 1.2909, 1.2908, 1.2908, 1.2907, 1.2907, 1.2907, 1.2907, 1.2907, 1.2907, 1.2906, 1.2906, 1.2905, 1.2905, 1.2301, 1.2421, 1.2735, 1.0805, 1.2534, 0.7107, 0.7423, 0.4586, 0.2905, 0.2852, 0.1983, 1.0065, 0.6932, 0.1302, 0.3186, 0.3462, -0.1978, -0.0944, 0.9973, -0.1966, 0.4194, -0.0512, -1.0966, 1.4733, 1.4731, 1.473, 1.4728, 1.4727, 1.4726, 1.4726, 1.4724, 1.4724, 1.4723, 1.4723, 1.4722, 1.4721, 1.4721, 1.4721, 1.4719, 1.4719, 1.4715, 1.4715, 1.4715, 1.4713, 1.4713, 1.4713, 1.4712, 1.471, 1.471, 1.4709, 1.4706, 1.4706, 1.4704, 1.4552, 1.4518, 1.3979, 1.368, 1.3921, 1.2286, 1.3154, 1.2832, 0.5452, 0.8933, 0.0528, 0.933, -0.2933, -0.0649, -0.2672, -0.0753, 0.3508, -0.2616, -0.2586, -0.4747, 1.5167, 1.5166, 1.5166, 1.5164, 1.5164, 1.5163, 1.5162, 1.5161, 1.516, 1.5159, 1.5158, 1.5158, 1.5158, 1.5156, 1.5156, 1.5154, 1.5153, 1.5152, 1.5151, 1.515, 1.5147, 1.5145, 1.5145, 1.5144, 1.5144, 1.5143, 1.5141, 1.5141, 1.5141, 1.5141, 1.5137, 1.5141, 1.2837, 1.3482, 1.149, 1.2052, 0.6414, 0.4158, 0.3362, 0.2505, 0.014, 0.0631, 0.7209, -0.8818, -0.0785, 1.7072, 1.7071, 1.707, 1.7069, 1.7069, 1.7068, 1.7068, 1.7068, 1.7068, 1.7068, 1.7067, 1.7066, 1.7065, 1.7064, 1.7064, 1.7063, 1.7062, 1.7062, 1.7059, 1.7059, 1.7058, 1.7057, 1.7057, 1.7056, 1.7055, 1.7055, 1.7055, 1.7054, 1.7054, 1.7054, 1.7054, 1.5295, 1.0632, 1.0568, 0.4129, 0.3885, 0.5184, 0.6491, 0.7732, 0.0795, -0.1017, 0.1381, -0.28, -0.6495, -0.6094, 2.3417, 2.3416, 2.3415, 2.3411, 2.3408, 2.3408, 2.3407, 2.3406, 2.3404, 2.34, 2.3395, 2.3393, 2.3393, 2.3391, 2.3391, 2.339, 2.339, 2.3387, 2.3386, 2.3374, 2.3373, 2.3372, 2.3372, 2.3371, 2.337, 2.337, 2.337, 2.337, 2.337, 2.3364, 2.3273, 2.2588, 2.0999, 1.9775, 1.5646, 0.9332, 0.8112, 1.7741, 0.7872, 0.6907, 0.1754, -0.3956, 0.8793, 0.4658, -0.5213, -0.275, -1.1423, -0.9946]}, \"token.table\": {\"Topic\": [5, 5, 1, 4, 1, 2, 5, 3, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 3, 5, 1, 2, 5, 3, 3, 1, 2, 3, 4, 5, 4, 2, 3, 1, 2, 1, 2, 3, 2, 3, 5, 4, 2, 2, 4, 5, 1, 5, 1, 3, 4, 5, 1, 2, 4, 1, 3, 4, 5, 5, 5, 4, 3, 3, 3, 1, 2, 1, 2, 1, 2, 4, 1, 5, 5, 4, 5, 5, 2, 3, 3, 1, 1, 2, 4, 5, 3, 4, 4, 2, 3, 5, 4, 3, 2, 1, 2, 2, 3, 1, 3, 4, 1, 5, 4, 2, 3, 1, 2, 3, 4, 3, 5, 1, 1, 2, 4, 5, 2, 3, 4, 2, 1, 3, 1, 4, 4, 3, 5, 1, 3, 3, 4, 1, 3, 4, 4, 2, 3, 3, 4, 2, 1, 1, 1, 2, 4, 2, 2, 4, 1, 2, 3, 4, 5, 4, 3, 4, 4, 2, 2, 5, 1, 5, 3, 3, 5, 2, 4, 5, 1, 1, 1, 2, 1, 2, 1, 2, 3, 4, 5, 2, 5, 5, 2, 2, 5, 1, 2, 1, 3, 1, 1, 5, 4, 1, 2, 1, 1, 4, 4, 2, 5, 5, 1, 3, 3, 5, 2, 4, 5, 1, 2, 3, 4, 5, 3, 5, 4, 2, 3, 2, 2, 4, 3, 4, 1, 2, 3, 5, 4, 2, 5, 1, 1, 5, 5, 1, 2, 2, 5, 1, 4, 1, 2, 4, 3, 2, 2, 4, 5, 3, 4, 1, 2, 1, 2, 3, 4, 5, 2, 5, 4, 2, 5, 2, 1, 3, 5, 3, 3, 1, 2, 3, 4, 5, 5], \"Freq\": [0.9977666531436715, 0.9982937247514234, 0.9979142202015077, 0.9968643847200496, 0.017996289859358847, 0.981922565451267, 0.9958282830788356, 0.9995788665263692, 0.998840493283906, 0.31233312932626695, 0.17631945311098038, 0.4165418834093152, 0.09468193408952064, 0.9936106821256794, 0.41695502812828217, 0.5822115941547354, 0.9990166240840758, 0.9983763533295076, 0.9975901438788629, 0.9990395015794782, 0.9971980075831852, 0.9980196476133921, 0.9958995676003961, 0.9986749900617754, 0.9996564443601467, 0.5762195677115939, 0.14256123521436034, 0.06821032325157404, 0.09858134309351577, 0.11451368137125569, 0.9994418754049103, 0.9982836770687331, 0.9986828654278685, 0.8082108123239294, 0.19170499052427437, 0.7505881621629036, 0.15736124531202306, 0.09116961037918796, 0.9990651882137747, 0.9989198426503613, 0.9959435342820573, 0.9983758419555981, 0.9994417941286909, 0.9960864568634885, 0.4319450184188599, 0.5666801617788713, 0.9971293781863686, 0.9927916652973733, 0.26044995458582987, 0.15497848537338635, 0.392827410842264, 0.19157062775321368, 0.9960021136261684, 0.9968000913125434, 0.9983828792118725, 0.364734729345122, 0.3324556091540063, 0.26722086026477543, 0.035565018653684395, 0.9945255620860141, 0.9976862893929473, 0.9979841268572521, 0.9979540606466064, 0.9983026302530136, 0.9986245833910472, 0.9977608123423035, 0.9987563249010013, 0.9979979678489102, 0.9967103396842136, 0.9966872209820196, 0.9987416148954524, 0.9989992707211306, 0.9959194085362777, 0.9985240027193489, 0.9961193611384136, 0.9984106884929016, 0.9965194132424737, 0.9966615141695125, 0.9958228295099928, 0.9980390973995149, 0.9981031426726884, 0.9964416728423316, 0.3771909180208631, 0.03172871113903626, 0.3467313553273883, 0.24443799061513538, 0.9988471985695119, 0.9986332628202942, 0.9987035299033946, 0.5595480731645878, 0.20825715606534762, 0.231714692874906, 0.9985982911565761, 0.9990490255185838, 0.9982676507499324, 0.9995172034252392, 0.9977386485757394, 0.9985052646709751, 0.9973552683479092, 0.9975279879096702, 0.9979785122171693, 0.9991185707050769, 0.9594330079577641, 0.03819756706155033, 0.9982482688396582, 0.26737957660336426, 0.7321813239582147, 0.24955811465874875, 0.21249076084069626, 0.23361053220214478, 0.30429711390168673, 0.9974157299376722, 0.9973326047576521, 0.9985237415064261, 0.22525041418676275, 0.17684949874167322, 0.5248086440728776, 0.07306676658537552, 0.782417840142937, 0.19354546571956863, 0.023678434635904674, 0.99947117863135, 0.5487307547720802, 0.4510701087614764, 0.998874332471752, 0.9991797762101207, 0.9990944034262768, 0.9979739781697372, 0.9992639454284068, 0.9980276336832963, 0.9986453947846647, 0.9976590285542539, 0.9982535053153846, 0.06585259375897395, 0.8447298233909762, 0.08946869634839909, 0.9980887241862797, 0.999449470356978, 0.9961221309327853, 0.9997550965110339, 0.9987554388310809, 0.9975675315826933, 0.9991033501905674, 0.9985668813082649, 0.14550130364863686, 0.8534211079391201, 0.9989816590236387, 0.9996437441041862, 0.9783156249607645, 0.02133398559104471, 0.2249859924245636, 0.21464180886481354, 0.3069851975179989, 0.19621623189900878, 0.05710851340278674, 0.9983990257028448, 0.7917853006054811, 0.20802976950361282, 0.9970651225682462, 0.9968419061268644, 0.9985542667503446, 0.9995688521290985, 0.9385361110129202, 0.06039485913854055, 0.9980607335789032, 0.9973851118745938, 0.9993602049086695, 0.9987453252958981, 0.9985415661114602, 0.9951141011655458, 0.9958647335120675, 0.997479819728055, 0.9970131416638953, 0.99735713979336, 0.996457765718245, 0.9981849524478572, 0.3666741392405918, 0.17538161492276824, 0.28178582150220033, 0.16371964155934707, 0.012475599412031968, 0.9987918104137589, 0.9923886512737363, 0.9958416215541467, 0.996432001652191, 0.9973590138528189, 0.9930671387604206, 0.9492816660363739, 0.049410559904101474, 0.9985308081670918, 0.9968574769918226, 0.9983000162118297, 0.997151829645149, 0.999601153719539, 0.9968133666440872, 0.9809906185763667, 0.017607523923165558, 0.9955412337184177, 0.7431650267287515, 0.2555547720371596, 0.9982969276861509, 0.3049380942956857, 0.6941271259844062, 0.9962958566236578, 0.9962411058555206, 0.997515553508612, 0.9974282105257612, 0.9986427821534397, 0.32537290013066816, 0.5212606665358663, 0.1530580683267735, 0.43383482502093634, 0.1708395201728811, 0.09082019359292523, 0.2738542410385137, 0.03066052571423563, 0.21494388518540913, 0.7844605573498986, 0.9987365256321241, 0.8999100477475281, 0.09977120879476607, 0.9976456255261756, 0.163408130663305, 0.8363560351916202, 0.9969545668033931, 0.9993075936711928, 0.5582062278899896, 0.3951662426501304, 0.02459615972559164, 0.02197377504896606, 0.9988829312124542, 0.010007990189523804, 0.9857870336680947, 0.9987684216032054, 0.9979102578164298, 0.9971501401524372, 0.9961182356752695, 0.9960783838640458, 0.996744121502755, 0.07915387271500993, 0.9191541545885846, 0.9995027552873137, 0.9993147535476651, 0.9996169468965667, 0.9219405265299462, 0.07710775312795913, 0.9996345922198441, 0.9988507047735312, 0.9995599552243211, 0.9985393514814651, 0.9968993801760453, 0.9989826953133175, 0.9985768815381912, 0.17231044472569193, 0.8264519478510038, 0.38762229836611634, 0.10959871670153064, 0.202740118115611, 0.08858937803670049, 0.21114385358154306, 0.5403750020843018, 0.4592731889552919, 0.9965282053240644, 0.9270173407728437, 0.0728876229767961, 0.998141481134467, 0.09162485695116582, 0.6920689308488284, 0.21628452627247985, 0.999204593842377, 0.9987886051046219, 0.33437537363108716, 0.24149776208751075, 0.2224111334040071, 0.13696053636907438, 0.06468690055915466, 0.9961576505712706], \"Term\": [\"1\", \"160\", \"2\", \"23\", \"3\", \"3\", \"400\", \"4th\", \"5\", \"a\", \"a\", \"a\", \"a\", \"able\", \"about\", \"about\", \"after\", \"again\", \"against\", \"air\", \"aircraft\", \"all\", \"always\", \"amid\", \"an\", \"and\", \"and\", \"and\", \"and\", \"and\", \"are\", \"army\", \"around\", \"as\", \"as\", \"at\", \"at\", \"at\", \"attack\", \"august\", \"ballistic\", \"based\", \"be\", \"because\", \"been\", \"been\", \"between\", \"bunch\", \"by\", \"by\", \"by\", \"by\", \"c\", \"cheating\", \"check\", \"china\", \"china\", \"china\", \"china\", \"coming\", \"could\", \"crisis\", \"d\", \"day\", \"dead\", \"defense\", \"delegation\", \"democracy\", \"democratic\", \"desire\", \"did\", \"do\", \"does\", \"don\", \"drill\", \"easily\", \"f\", \"fact\", \"father\", \"fire\", \"fired\", \"firm\", \"for\", \"for\", \"for\", \"for\", \"foreign\", \"forget\", \"found\", \"from\", \"from\", \"from\", \"funny\", \"good\", \"had\", \"have\", \"head\", \"her\", \"here\", \"high\", \"his\", \"hotel\", \"house\", \"house\", \"how\", \"i\", \"i\", \"in\", \"in\", \"in\", \"in\", \"independent\", \"international\", \"into\", \"is\", \"is\", \"is\", \"is\", \"island\", \"island\", \"island\", \"it\", \"its\", \"its\", \"japan\", \"just\", \"li\", \"live\", \"long\", \"low\", \"m\", \"matter\", \"maybe\", \"military\", \"military\", \"military\", \"million\", \"minister\", \"ministry\", \"missile\", \"more\", \"must\", \"nancy\", \"national\", \"near\", \"near\", \"no\", \"not\", \"now\", \"now\", \"of\", \"of\", \"of\", \"of\", \"of\", \"official\", \"on\", \"on\", \"one\", \"or\", \"our\", \"out\", \"over\", \"over\", \"own\", \"pain\", \"part\", \"people\", \"president\", \"quick\", \"record\", \"respond\", \"responsible\", \"restricted\", \"rise\", \"russia\", \"s\", \"s\", \"s\", \"s\", \"s\", \"said\", \"sea\", \"secure\", \"set\", \"she\", \"shipping\", \"should\", \"should\", \"showing\", \"small\", \"so\", \"sovereignty\", \"speaker\", \"speech\", \"stop\", \"stop\", \"stopped\", \"strait\", \"strait\", \"support\", \"t\", \"t\", \"take\", \"talking\", \"teen\", \"tension\", \"territory\", \"that\", \"that\", \"that\", \"the\", \"the\", \"the\", \"the\", \"the\", \"their\", \"their\", \"there\", \"they\", \"they\", \"thing\", \"this\", \"this\", \"thought\", \"time\", \"to\", \"to\", \"to\", \"to\", \"today\", \"too\", \"too\", \"trip\", \"u\", \"under\", \"unelected\", \"unification\", \"unless\", \"up\", \"up\", \"us\", \"video\", \"visit\", \"war\", \"war\", \"was\", \"watch\", \"we\", \"what\", \"whatever\", \"when\", \"where\", \"will\", \"will\", \"with\", \"with\", \"with\", \"with\", \"with\", \"world\", \"world\", \"would\", \"you\", \"you\", \"your\", \"\\u2019\", \"\\u2019\", \"\\u2019\", \"\\u201c\", \"\\u201d\", \"\\u2026\", \"\\u2026\", \"\\u2026\", \"\\u2026\", \"\\u2026\", \"\\ud83c\\uddf8\\ud83c\\uddf4\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [5, 2, 3, 1, 4]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el422821496403261609454799986\", ldavis_el422821496403261609454799986_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el422821496403261609454799986\", ldavis_el422821496403261609454799986_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el422821496403261609454799986\", ldavis_el422821496403261609454799986_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "PreparedData(topic_coordinates=              x         y  topics  cluster       Freq\n",
       "topic                                                \n",
       "4     -0.050111 -0.080405       1        1  27.425051\n",
       "1      0.069574 -0.275230       2        1  22.908153\n",
       "2     -0.211219  0.122956       3        1  21.933353\n",
       "0     -0.091503  0.066223       4        1  18.122202\n",
       "3      0.283259  0.166456       5        1   9.611241, topic_info=      Term          Freq         Total Category  logprob  loglift\n",
       "90      on   6917.000000   6917.000000  Default  30.0000  30.0000\n",
       "43      to  11058.000000  11058.000000  Default  29.0000  29.0000\n",
       "75       ’   4813.000000   4813.000000  Default  28.0000  28.0000\n",
       "44      us   2922.000000   2922.000000  Default  27.0000  27.0000\n",
       "48      it   2488.000000   2488.000000  Default  26.0000  26.0000\n",
       "..     ...           ...           ...      ...      ...      ...\n",
       "104   that    461.231226   3011.928773   Topic5  -4.3212   0.4658\n",
       "8       of    529.622722   9280.577771   Topic5  -4.1829  -0.5213\n",
       "99      is    470.585641   6446.159068   Topic5  -4.3011  -0.2750\n",
       "13     the    528.106896  17220.839751   Topic5  -4.1858  -1.1423\n",
       "19   china    367.831707  10347.246084   Topic5  -4.5474  -0.9946\n",
       "\n",
       "[271 rows x 6 columns], token_table=      Topic      Freq Term\n",
       "term                      \n",
       "410       5  0.997767    1\n",
       "301       5  0.998294  160\n",
       "626       1  0.997914    2\n",
       "476       4  0.996864   23\n",
       "198       1  0.017996    3\n",
       "...     ...       ...  ...\n",
       "17        2  0.241498    …\n",
       "17        3  0.222411    …\n",
       "17        4  0.136961    …\n",
       "17        5  0.064687    …\n",
       "2084      5  0.996158   🇸🇴\n",
       "\n",
       "[277 rows x 3 columns], R=30, lambda_step=0.01, plot_opts={'xlab': 'PC1', 'ylab': 'PC2'}, topic_order=[5, 2, 3, 1, 4])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pyLDAvis.gensim_models as gensimvis\n",
    "import pickle \n",
    "import pyLDAvis\n",
    "# Visualize the topics\n",
    "pyLDAvis.enable_notebook()\n",
    "\n",
    "LDAvis_prepared = gensimvis.prepare(lda_model, corpus, id2word)\n",
    "LDAvis_prepared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install wordcloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c:\\Users\\Yonny\\anaconda3\\python.exe\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print(sys.executable)\n",
    "from wordcloud import WordCloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=400x200 at 0x1F4808F9D00>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_string = ','.join(list(tweets_df['clean_text'].values))\n",
    "\n",
    "wordcloud = WordCloud(background_color=\"white\", max_words=1000, contour_width=3, contour_color='steelblue')\n",
    "\n",
    "wordcloud.generate(long_string)\n",
    "\n",
    "# Visualize the word cloud\n",
    "wordcloud.to_image()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.4 Sentiment Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import re\n",
    "import nltk \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # plot params\n",
    "# plot_size = plt.rcParams[\"figure.figsize\"] \n",
    "# plot_size[0] = 8\n",
    "# plot_size[1] = 6\n",
    "# plt.rcParams[\"figure.figsize\"] = plot_size "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # number of tweets for each airline\n",
    "# sns.set(rc={'figure.figsize':(14,10)})\n",
    "# tweets_df.polarity.value_counts().plot(kind='pie', autopct='%1.0f%%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Distribution of sentiments across all the tweets.\n",
    "# sns.set(rc={'figure.figsize':(14,10)})\n",
    "# tweets_df.sentiment.value_counts().plot(kind='pie', autopct='%1.0f%%', colors=[\"red\", \"yellow\", \"green\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sns.set(rc={'figure.figsize':(12,8)})\n",
    "# sentiment = tweets_df.groupby(['Polarity', 'Sentiment']).sentiment.count().unstack()\n",
    "# sentiment.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.4.1 Sentiment Analysis with Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[' extra random image  i  focus in one very specific zone of the western coast   district  city  ta …'\n",
      " ' china  s media the military for each area of the in the strait read the in the pi …'\n",
      " 'china even cut off communication  they don  t from the us  but here clown the stage to ask to change  s mind '\n",
      " ... 'thanks smart move '\n",
      " ' people  s desire for unification with china near record low as rise a survey from  s national che …'\n",
      " ' people  s desire for unification with china near record low as rise a survey from  s national che …']\n"
     ]
    }
   ],
   "source": [
    "# Selecting the feature and the label\n",
    "features = tweets_df.iloc[:, 1].values\n",
    "labels = tweets_df.iloc[:, 3].values\n",
    "\n",
    "print(features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Cleaning using regular expression\n",
    "processed_features = []\n",
    "\n",
    "for sentence in range(0, len(features)):\n",
    "    # Remove all the special characters\n",
    "    processed_feature = re.sub(r'\\W', ' ', str(features[sentence]))\n",
    "\n",
    "    # remove all single characters\n",
    "    processed_feature= re.sub(r'\\s+[a-zA-Z]\\s+', ' ', processed_feature)\n",
    "\n",
    "    # Remove single characters from the start\n",
    "    processed_feature = re.sub(r'\\^[a-zA-Z]\\s+', ' ', processed_feature) \n",
    "\n",
    "    # Substituting multiple spaces with single space\n",
    "    processed_feature = re.sub(r'\\s+', ' ', processed_feature, flags=re.I)\n",
    "\n",
    "    # Removing prefixed 'b'\n",
    "    processed_feature = re.sub(r'^b\\s+', '', processed_feature)\n",
    "\n",
    "    # Converting to Lowercase\n",
    "    processed_feature = processed_feature.lower()\n",
    "\n",
    "    processed_features.append(processed_feature)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from nltk.corpus import stopwords\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Unigram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer = TfidfVectorizer (max_features=2500, min_df=7, max_df=0.8, stop_words=stopwords.words('english'))\n",
    "processed_features_vectorized = vectorizer.fit_transform(processed_features).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the dataset into training(80%) and testing(20%)\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(processed_features_vectorized, labels, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=200, random_state=0)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train the dataset with random forest algorirhm\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "text_classifier = RandomForestClassifier(n_estimators=200, random_state=0)\n",
    "text_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make prediction with trained model\n",
    "predictions = text_classifier.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['neutral', 'positive', 'neutral', 'negative', 'positive',\n",
       "       'neutral', 'neutral', 'neutral', 'neutral', 'positive'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9320454545454545\n"
     ]
    }
   ],
   "source": [
    "# evaluate the model trained with random forest\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "print(accuracy_score(y_test, predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bigram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer_bigram = TfidfVectorizer (max_features=2189, min_df=7, max_df=0.8, stop_words=stopwords.words('english'),ngram_range = (2,2))\n",
    "processed_features_vectorized_bigram = vectorizer_bigram.fit_transform(processed_features).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the dataset into training(80%) and testing(20%)\n",
    "X_train, X_test, y_train, y_test = train_test_split(processed_features_vectorized_bigram, labels, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_classifier_bigram = RandomForestClassifier(n_estimators=200, random_state=0)\n",
    "text_classifier_bigram.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "X has 2300 features, but DecisionTreeClassifier is expecting 2189 features as input.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_4228/1062198559.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# make prediction with trained model\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mpredictions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtext_classifier\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mc:\\Users\\Yonny\\anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_forest.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    628\u001b[0m             \u001b[0mThe\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mclasses\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    629\u001b[0m         \"\"\"\n\u001b[1;32m--> 630\u001b[1;33m         \u001b[0mproba\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    631\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    632\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\Users\\Yonny\\anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_forest.py\u001b[0m in \u001b[0;36mpredict_proba\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    672\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    673\u001b[0m         \u001b[1;31m# Check data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 674\u001b[1;33m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    675\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    676\u001b[0m         \u001b[1;31m# Assign chunk of trees to jobs\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\Users\\Yonny\\anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_forest.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    420\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    421\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 422\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mestimators_\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    423\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    424\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\Users\\Yonny\\anaconda3\\lib\\site-packages\\sklearn\\tree\\_classes.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[1;34m(self, X, check_input)\u001b[0m\n\u001b[0;32m    405\u001b[0m         \u001b[1;34m\"\"\"Validate the training data on predict (probabilities).\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    406\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 407\u001b[1;33m             X = self._validate_data(X, dtype=DTYPE, accept_sparse=\"csr\",\n\u001b[0m\u001b[0;32m    408\u001b[0m                                     reset=False)\n\u001b[0;32m    409\u001b[0m             if issparse(X) and (X.indices.dtype != np.intc or\n",
      "\u001b[1;32mc:\\Users\\Yonny\\anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[1;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[0;32m    435\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    436\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcheck_params\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'ensure_2d'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 437\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_check_n_features\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    438\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    439\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\Users\\Yonny\\anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m_check_n_features\u001b[1;34m(self, X, reset)\u001b[0m\n\u001b[0;32m    363\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    364\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mn_features\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mn_features_in_\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 365\u001b[1;33m             raise ValueError(\n\u001b[0m\u001b[0;32m    366\u001b[0m                 \u001b[1;34mf\"X has {n_features} features, but {self.__class__.__name__} \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    367\u001b[0m                 f\"is expecting {self.n_features_in_} features as input.\")\n",
      "\u001b[1;31mValueError\u001b[0m: X has 2300 features, but DecisionTreeClassifier is expecting 2189 features as input."
     ]
    }
   ],
   "source": [
    "# make prediction with trained model\n",
    "predictions = text_classifier.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# evaluate the model trained with random forest\n",
    "print(accuracy_score(y_test, predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sentiment Analysis with SGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = tweets_df['clean_text']\n",
    "y = tweets_df['sentiment']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16500\n",
      "5500\n",
      "16500\n",
      "5500\n"
     ]
    }
   ],
   "source": [
    "print(X_train.size)\n",
    "print(X_test.size)\n",
    "print(y_train.size)\n",
    "print(y_test.size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics import plot_confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scaling the input\n",
    "clf = make_pipeline(StandardScaler(), SGDClassifier(max_iter=1000, tol=1e-2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "count_vect = CountVectorizer(1,2)\n",
    "#X_train = X_train.replace(np.nan, '', regex=True)\n",
    "X_train_counts = count_vect.fit_transform(X_train)\n",
    "X_train_counts = X_train_counts.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                ('sgdclassifier', SGDClassifier(tol=0.01))])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(X_train_counts, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = X_test.replace(np.nan, '', regex=True)\n",
    "# use transform not fit_transform\n",
    "X_test_counts = count_vect.transform(X_test)\n",
    "X_test_counts = X_test_counts.toarray()\n",
    "# prediction = clf.prevaluedict(X_test_counts)\n",
    "prediction = clf.predict(X_test_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# making prediction\n",
    "prediction = clf.predict(X_test_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9214545454545454"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(prediction == y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot_confusion_matrix(clf, X_test, y_test, display_labels = ['negative', 'positive','neutral'])\n",
    "# plt.suptitle('Confusion Matrix')\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sentiment Analysis with Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.7 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "a492b5279fe2e495c47ca4f6b152dc65c94fc5038b5e698174c22ffedef5d685"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
